{"version":3,"sources":["editorContext.js","components/editorArray.jsx","components/previewArray.jsx","App.js","reportWebVitals.js","index.js"],"names":["defaultContext","markdownText","setMarkdownText","React","createContext","EditorContainer","styled","div","EditorTitle","EditorText","textarea","EditorArray","props","useContext","EditorContext","id","name","value","onChange","e","newValue","currentTarget","PreviewContainer","PreviewTitle","PreviewText","PreviewArray","marked","setOptions","breaks","dangerouslySetInnerHTML","__html","AppContainer","App","useState","contextValue","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAEMA,EAAgB,CAClBC,aAAc,GACdC,gBAAiB,cAGNC,MAAMC,cAAcJ,G,OCH7BK,EAAiBC,IAAOC,IAAT,+EAKfC,EAAYF,IAAOC,IAAR,0JAOXE,EAAWH,IAAOI,SAAR,+KA2BDC,I,MAAAA,EAlBd,SAAqBC,GAAO,IAElBX,EAAgBY,qBAAWC,GAA3Bb,aACCC,EAAoBW,qBAAWC,GAA/BZ,gBAOR,OAAO,eAACG,EAAD,WACH,cAACG,EAAD,qBACA,cAACC,EAAD,CAAYM,GAAG,SAASC,KAAK,cAAcC,MAAOhB,EAAciB,SAP9C,SAAAC,GAClB,IAAMC,EAASD,EAAEE,cAAcJ,MAC/Bf,EAAgBkB,U,gBC3BlBE,EAAkBhB,IAAOC,IAAT,+EAKhBgB,EAAajB,IAAOC,IAAR,0JAOZiB,EAAYlB,IAAOC,IAAR,iNAyBFkB,I,EAAAA,EAdd,SAAsBb,GAAO,IAEnBX,EAAgBY,qBAAWC,GAA3Bb,aAKP,OAJAyB,IAAOC,WAAW,CACdC,QAAQ,IAGL,eAACN,EAAD,WACH,cAACC,EAAD,wBACA,cAACC,EAAD,CAAaT,GAAG,UAAUc,wBAAyB,CAACC,OAAOJ,IAAOzB,UCRpE8B,EAAezB,IAAOC,IAAV,qGA0BHyB,MAnBf,WAAgB,IAAD,EAE0BC,mBA9BvB,mqBA4BH,mBAIPC,EAAe,CACjBjC,aALS,KAMTC,gBANS,MASb,OACE,cAAC,EAAciC,SAAf,CAAwBlB,MAAOiB,EAA/B,SACE,eAACH,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,UCrCOK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bd18796e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst defaultContext ={\r\n    markdownText: \"\",\r\n    setMarkdownText: () => {}\r\n};\r\n\r\nexport default React.createContext(defaultContext)","import React, {useContext} from\"react\";\r\nimport styled from \"styled-components\";\r\nimport EditorContext from '../editorContext';\r\n\r\nconst EditorContainer =styled.div`\r\n    width:50%;\r\n    height:100%;\r\n    padding:1%;\r\n`\r\nconst EditorTitle=styled.div`\r\n    width:100%;\r\n    font-size:20px;    \r\n    background-color:black;\r\n    border: 1px solid black;\r\n    text-align: center;\r\n`\r\nconst EditorText=styled.textarea`\r\n    width:100%;    \r\n    height:90vh;\r\n    background-color:white;\r\n    font-size:15px;\r\n    color:black;  \r\n    resize:none;   \r\n    padding:1%;\r\n`\r\n function EditorArray(props){\r\n    \r\n    const {markdownText} = useContext(EditorContext);\r\n    const { setMarkdownText } = useContext(EditorContext);\r\n\r\n    const onInputChange = e=>{\r\n        const newValue=e.currentTarget.value;\r\n        setMarkdownText(newValue)        \r\n    }\r\n\r\n    return <EditorContainer>\r\n        <EditorTitle>Editor</EditorTitle>\r\n        <EditorText id=\"editor\" name=\"description\" value={markdownText} onChange={onInputChange}>\r\n            \r\n        </EditorText>\r\n    </EditorContainer>\r\n}\r\n\r\nexport default EditorArray","import React, {useContext} from\"react\";\r\nimport styled from \"styled-components\";\r\nimport EditorContext from '../editorContext';\r\nimport marked from 'marked';\r\n\r\nconst PreviewContainer =styled.div`\r\n    width:50%;\r\n    height:100%;\r\n    padding:1%;\r\n`\r\nconst PreviewTitle=styled.div`\r\n    width:100%;\r\n    font-size:20px;    \r\n    background-color:black;\r\n    border: 1px solid black;\r\n    text-align: center;\r\n`\r\nconst PreviewText=styled.div`\r\n    width:100%;\r\n    height:90vh;\r\n    background-color:white;\r\n    font-size:15px;\r\n    color:black;    \r\n    word-break: break-word;\r\n    overflow:auto;\r\n    padding:1%;    \r\n    `\r\n\r\n function PreviewArray(props){\r\n\r\n    const {markdownText} = useContext(EditorContext); \r\n    marked.setOptions({\r\n        breaks: true\r\n      }) \r\n\r\n    return <PreviewContainer>\r\n        <PreviewTitle>Previewer</PreviewTitle>\r\n        <PreviewText id=\"preview\" dangerouslySetInnerHTML={{__html:marked(markdownText)}}>            \r\n        </PreviewText>\r\n    </PreviewContainer>\r\n}\r\n\r\nexport default PreviewArray","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport './css/style_markdown_previewer.min.css';\nimport styled from \"styled-components\";\nimport EditorArray from \"./components/editorArray\";\nimport PreviewArray from \"./components/previewArray\"\nimport EditorContext from './editorContext';\n\nconst placeholder=\n` # H1 : Visualiseur Markdown\n  ## H2 : Ceci est un TP pour freecodecamp.org\n  [Cliquez-ici pour le descriptif de ce TP ](https://www.freecodecamp.org/learn/front-end-libraries/front-end-libraries-projects/build-a-markdown-previewer)\n   \n  - **Inline HTML :** \\`<div></div>\\`\n\n  - **Blockquotes :**\n  > On peut écrire des blockquotes ici.\n  > Ils sont très pratiques dans les e-mails pour émuler le texte de réponse.\n\n  - **Blocks of code :**\n  \\`\\`\\`javascript\n  var s = \"JavaScript syntax highlighting\";\n  alert(s);\n  \\`\\`\\`  \n  \n  ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n\n  ` \n\nconst AppContainer = styled.div`  \n  background-color:#6c757d; \n  display:flex;\n  flex-direction:row;\n `  \n\n\nfunction App() {\n\n  const [markdownText, setMarkdownText]= useState(placeholder);\n\n  const contextValue = {\n      markdownText,\n      setMarkdownText\n  };\n  \n  return (\n    <EditorContext.Provider value={contextValue}>\n      <AppContainer>  \n        <EditorArray></EditorArray>      \n        <PreviewArray></PreviewArray>   \n      </AppContainer>\n    </EditorContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}